
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 26 08:05:11 COT 2024
//----------------------------------------------------

package analizadorsintactico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 26 08:05:11 COT 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\025\007\000\002\025\006\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\005\000" +
    "\002\007\005\000\002\005\005\000\002\005\003\000\002" +
    "\010\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\011\000\002\014\005" +
    "\000\002\014\003\000\002\015\011\000\002\016\012\000" +
    "\002\017\005\000\002\017\003\000\002\020\007\000\002" +
    "\021\006\000\002\021\005\000\002\021\005\000\002\006" +
    "\006\000\002\006\006\000\002\022\005\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\004\004\001\002\000\006\041\010\042" +
    "\011\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\006\005\161\042\155\001\002\000\004\042" +
    "\011\001\002\000\004\044\012\001\002\000\022\006\027" +
    "\007\024\010\013\011\016\016\023\020\033\024\020\041" +
    "\032\001\002\000\006\041\146\044\145\001\002\000\042" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014\uffee\016" +
    "\uffee\017\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\040\uffee\041\uffee\043\uffee\001\002\000\042\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\040\ufff1\041" +
    "\ufff1\043\ufff1\001\002\000\004\027\133\001\002\000\042" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\014\uffef\016" +
    "\uffef\017\uffef\020\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\040\uffef\041\uffef\043\uffef\001\002\000\004\041\120\001" +
    "\002\000\024\006\027\007\024\010\013\011\016\016\023" +
    "\020\033\024\020\041\032\043\117\001\002\000\042\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\016\uffed" +
    "\017\uffed\020\uffed\023\uffed\024\uffed\025\uffed\026\uffed\040" +
    "\uffed\041\uffed\043\uffed\001\002\000\004\027\111\001\002" +
    "\000\004\041\103\001\002\000\042\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\040\ufff3\041\ufff3\043" +
    "\ufff3\001\002\000\042\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\013\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\040\ufff0\041\ufff0\043\ufff0\001\002" +
    "\000\004\041\103\001\002\000\042\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\040\ufff2\041\ufff2\043" +
    "\ufff2\001\002\000\042\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\013\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\040\ufff4\041\ufff4\043\ufff4\001\002" +
    "\000\004\035\075\001\002\000\004\041\034\001\002\000" +
    "\004\035\035\001\002\000\010\027\041\040\036\041\040" +
    "\001\002\000\040\006\uffcf\007\uffcf\010\uffcf\011\uffcf\016" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\041\uffcf\001\002\000\040\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\016\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\024\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\041\uffd1\001\002\000\040\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\041\uffd0\001\002" +
    "\000\010\027\041\040\036\041\040\001\002\000\006\021" +
    "\051\032\052\001\002\000\040\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\030" +
    "\uffd3\031\047\032\uffd3\033\uffd3\034\uffd3\041\uffd3\001\002" +
    "\000\036\006\uffd5\007\uffd5\010\uffd5\011\uffd5\016\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\024\uffd5\030\uffd5\032\uffd5\033\045" +
    "\034\uffd5\041\uffd5\001\002\000\010\027\041\040\036\041" +
    "\040\001\002\000\040\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\016\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\030\uffd4\031" +
    "\047\032\uffd4\033\uffd4\034\uffd4\041\uffd4\001\002\000\010" +
    "\027\041\040\036\041\040\001\002\000\040\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\024\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\041" +
    "\uffd2\001\002\000\010\027\041\040\036\041\040\001\002" +
    "\000\010\027\041\040\036\041\040\001\002\000\036\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\016\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\024\uffd6\030\uffd6\032\uffd6\033\045\034\uffd6\041" +
    "\uffd6\001\002\000\026\006\027\007\024\010\013\011\016" +
    "\016\023\020\033\022\055\024\020\032\052\041\032\001" +
    "\002\000\004\040\071\001\002\000\024\006\027\007\024" +
    "\010\013\011\016\016\023\020\033\023\uffdd\024\020\041" +
    "\032\001\002\000\004\023\060\001\002\000\042\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\040\uffdf" +
    "\041\uffdf\043\uffdf\001\002\000\042\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\014\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\040\ufff6\041\ufff6\043" +
    "\ufff6\001\002\000\042\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\040\ufff9\041\ufff9\043\ufff9\001\002" +
    "\000\042\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\014" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\040\ufff7\041\ufff7\043\ufff7\001\002\000\042\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\040" +
    "\ufff5\041\ufff5\043\ufff5\001\002\000\042\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\013\ufffb\014\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\040\ufffb\041\ufffb" +
    "\043\ufffb\001\002\000\042\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\040\ufff8\041\ufff8\043\ufff8\001" +
    "\002\000\042\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\017\ufffa\020\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\040\ufffa\041\ufffa\043\ufffa\001\002\000\042" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\040\ufffc\041\ufffc\043\ufffc\001\002\000\022\006\027\007" +
    "\024\010\013\011\016\016\023\020\033\024\020\041\032" +
    "\001\002\000\024\006\027\007\024\010\013\011\016\016" +
    "\023\020\033\023\uffde\024\020\041\032\001\002\000\006" +
    "\030\074\032\052\001\002\000\040\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\016\uffce\020\uffce\021\uffce\022\uffce\024\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\041\uffce\001" +
    "\002\000\012\027\041\040\036\041\040\044\076\001\002" +
    "\000\004\034\101\001\002\000\006\032\052\034\100\001" +
    "\002\000\042\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8" +
    "\014\uffd8\016\uffd8\017\uffd8\020\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\040\uffd8\041\uffd8\043\uffd8\001\002\000\042" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\040\uffd7\041\uffd7\043\uffd7\001\002\000\006\034\105\037" +
    "\104\001\002\000\006\034\uffe9\037\uffe9\001\002\000\004" +
    "\041\106\001\002\000\042\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\013\uffec\014\uffec\016\uffec\017\uffec\020\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\040\uffec\041\uffec\043\uffec\001" +
    "\002\000\006\034\uffea\037\uffea\001\002\000\006\034\110" +
    "\037\104\001\002\000\042\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\020\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\040\uffeb\041\uffeb\043\uffeb\001" +
    "\002\000\010\027\041\040\036\041\040\001\002\000\006" +
    "\030\113\032\052\001\002\000\004\015\114\001\002\000" +
    "\022\006\027\007\024\010\013\011\016\016\023\020\033" +
    "\024\020\041\032\001\002\000\024\006\027\007\024\010" +
    "\013\011\016\016\023\017\116\020\033\024\020\041\032" +
    "\001\002\000\042\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\040\uffe0\041\uffe0\043\uffe0\001\002\000" +
    "\006\005\ufffd\042\ufffd\001\002\000\004\015\121\001\002" +
    "\000\006\025\123\040\122\001\002\000\004\036\130\001" +
    "\002\000\004\036\126\001\002\000\004\026\125\001\002" +
    "\000\042\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\040\uffdc\041\uffdc\043\uffdc\001\002\000\022\006" +
    "\027\007\024\010\013\011\016\016\023\020\033\024\020" +
    "\041\032\001\002\000\024\006\027\007\024\010\013\011" +
    "\016\016\023\020\033\024\020\026\uffd9\041\032\001\002" +
    "\000\022\006\027\007\024\010\013\011\016\016\023\020" +
    "\033\024\020\041\032\001\002\000\030\006\027\007\024" +
    "\010\013\011\016\016\023\020\033\024\020\025\123\026" +
    "\uffda\040\122\041\032\001\002\000\004\026\uffdb\001\002" +
    "\000\010\027\041\040\036\041\040\001\002\000\006\030" +
    "\135\032\052\001\002\000\004\012\136\001\002\000\022" +
    "\006\027\007\024\010\013\011\016\016\023\020\033\024" +
    "\020\041\032\001\002\000\026\006\027\007\024\010\013" +
    "\011\016\013\142\014\uffe1\016\023\020\033\024\020\041" +
    "\032\001\002\000\004\014\141\001\002\000\042\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\040\uffe3" +
    "\041\uffe3\043\uffe3\001\002\000\022\006\027\007\024\010" +
    "\013\011\016\016\023\020\033\024\020\041\032\001\002" +
    "\000\024\006\027\007\024\010\013\011\016\014\uffe2\016" +
    "\023\020\033\024\020\041\032\001\002\000\006\034\uffe6" +
    "\037\uffe6\001\002\000\006\034\uffe5\037\uffe5\001\002\000" +
    "\006\034\uffe4\037\uffe4\001\002\000\006\034\151\037\150" +
    "\001\002\000\006\041\146\044\145\001\002\000\042\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\040" +
    "\uffe8\041\uffe8\043\uffe8\001\002\000\006\034\uffe7\037\uffe7" +
    "\001\002\000\006\005\154\042\155\001\002\000\004\002" +
    "\001\001\002\000\004\044\156\001\002\000\022\006\027" +
    "\007\024\010\013\011\016\016\023\020\033\024\020\041" +
    "\032\001\002\000\024\006\027\007\024\010\013\011\016" +
    "\016\023\020\033\024\020\041\032\043\160\001\002\000" +
    "\006\005\ufffe\042\ufffe\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\002\004\001\001\000\004\025\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\152\001\001\000\002\001\001\000\024\003" +
    "\020\004\030\006\024\007\027\010\014\013\025\015\016" +
    "\016\013\020\021\001\001\000\006\011\146\012\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\067\006" +
    "\064\007\066\010\061\013\065\015\062\016\060\020\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\041\023\043\024\042\026\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\072" +
    "\023\043\024\042\026\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\045\026\036" +
    "\001\001\000\002\001\001\000\004\026\047\001\001\000" +
    "\002\001\001\000\012\022\053\023\043\024\042\026\036" +
    "\001\001\000\010\023\052\024\042\026\036\001\001\000" +
    "\002\001\001\000\026\003\055\004\030\006\024\007\027" +
    "\010\014\013\025\015\016\016\013\017\056\020\021\001" +
    "\001\000\002\001\001\000\022\004\067\006\064\007\066" +
    "\010\061\013\065\015\062\016\060\020\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\071\004\030\006\024\007\027\010\014\013" +
    "\025\015\016\016\013\020\021\001\001\000\022\004\067" +
    "\006\064\007\066\010\061\013\065\015\062\016\060\020" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\076\023\043\024\042\026\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\111\023\043\024\042\026\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\114" +
    "\004\030\006\024\007\027\010\014\013\025\015\016\016" +
    "\013\020\021\001\001\000\022\004\067\006\064\007\066" +
    "\010\061\013\065\015\062\016\060\020\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\126\004\030" +
    "\006\024\007\027\010\014\013\025\015\016\016\013\020" +
    "\021\001\001\000\022\004\067\006\064\007\066\010\061" +
    "\013\065\015\062\016\060\020\063\001\001\000\024\003" +
    "\130\004\030\006\024\007\027\010\014\013\025\015\016" +
    "\016\013\020\021\001\001\000\024\004\067\006\064\007" +
    "\066\010\061\013\065\015\062\016\060\020\063\021\131" +
    "\001\001\000\002\001\001\000\012\022\133\023\043\024" +
    "\042\026\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\136\004\030\006\024\007\027\010\014\013" +
    "\025\014\137\015\016\016\013\020\021\001\001\000\022" +
    "\004\067\006\064\007\066\010\061\013\065\015\062\016" +
    "\060\020\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\142\004\030\006\024\007\027\010\014\013" +
    "\025\015\016\016\013\020\021\001\001\000\022\004\067" +
    "\006\064\007\066\010\061\013\065\015\062\016\060\020" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\156\004\030\006" +
    "\024\007\027\010\014\013\025\015\016\016\013\020\021" +
    "\001\001\000\022\004\067\006\064\007\066\010\061\013" +
    "\065\015\062\016\060\020\063\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String errsin="";
    public void syntax_error(Symbol x) {
        errsin += String.format(
            "\nError de sintaxis en posición %d,%d: cerca de %s",
            (x.left + 1), (x.right + 1), x.value
        );
        throw new UnsupportedOperationException(errsin);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // T ::= parentesisIzquierdo CONTENIDO parentesisDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // T ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // T ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTENIDO_A ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTENIDO_A ::= CONTENIDO_A operadorAritmetico T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDO_L ::= CONTENIDO_A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_L",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTENIDO_L ::= CONTENIDO_L operadorRelacional CONTENIDO_A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_L",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTENIDO ::= CONTENIDO_L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTENIDO ::= CONTENIDO operadorLogico CONTENIDO_L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= identificador asignacion constanteAlfanumerica puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= identificador asignacion CONTENIDO puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPCIONES ::= deOtroModo dosPuntos CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPCIONES ::= numero dosPuntos CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPCIONES ::= numero dosPuntos CUERPO OPCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SELECCION_MULTIPLE ::= segun identificador hacer OPCIONES finSegun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // POSIBLE_PASO ::= CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSIBLE_PASO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // POSIBLE_PASO ::= paso numero CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSIBLE_PASO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CICLO_PARA ::= para identificador asignacion CONTENIDO hasta CONTENIDO POSIBLE_PASO finPara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CICLO_MIENTRAS ::= mientras parentesisIzquierdo CONTENIDO parentesisDerecho hacer CUERPO finMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_DESICION ::= CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_DESICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_DESICION ::= CUERPO sino CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_DESICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DESICION ::= si parentesisIzquierdo CONTENIDO parentesisDerecho entonces CUERPO_DESICION finSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DESICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTO_ESCRITURA ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ESCRITURA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTO_ESCRITURA ::= constanteAlfanumerica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ESCRITURA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_ESCRITURA ::= ELEMENTO_ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ESCRITURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_ESCRITURA ::= LISTA_ESCRITURA coma ELEMENTO_ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ESCRITURA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESCRITURA ::= escribir LISTA_ESCRITURA puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIABLES_COMA ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES_COMA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARIABLES_COMA ::= VARIABLES_COMA coma identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES_COMA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LECTURA ::= leer VARIABLES_COMA puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LECTURA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFINICION ::= tipo VARIABLES_COMA puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO ::= SELECCION_MULTIPLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO ::= CICLO_PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= CICLO_MIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= DESICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= LECTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= DEFINICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= CUERPO SELECCION_MULTIPLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= CUERPO CICLO_PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= CUERPO CICLO_MIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= CUERPO DESICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= CUERPO ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= CUERPO LECTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= CUERPO ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= CUERPO DEFINICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NOMBRES ::= nombre constanteAlfanumerica CUERPO finNombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NOMBRES ::= NOMBRES nombre constanteAlfanumerica CUERPO finNombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= programa NOMBRES fin_programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= E EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // E ::= programa identificador NOMBRES fin_programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

